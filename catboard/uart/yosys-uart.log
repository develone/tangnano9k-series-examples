
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+79 (git sha1 b52f6cb19, gcc 10.2.1-6 -fPIC -Os)


-- Running command `read_verilog uart.v; synth_ice40 -top uart -json uart.json' --

1. Executing Verilog-2005 frontend: uart.v
Parsing Verilog input from `uart.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \uart

2.2.2. Analyzing design hierarchy..
Top module:  \uart
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$323 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$316 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$312 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$305 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$302 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$299 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$296 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$293 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$285 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$278 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$274 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$267 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$264 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$261 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$258 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$255 in module SB_DFFSR.
Marked 7 switch rules as full_case in process $proc$uart.v:111$27 in module uart.
Marked 2 switch rules as full_case in process $proc$uart.v:29$13 in module uart.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 45 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$326'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$322'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$315'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$311'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$304'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$301'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$298'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$295'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$292'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$290'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$288'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$284'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$277'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$273'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$266'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$263'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$260'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$252'.
  Set init value: \Q = 1'0
Found init rule in `\uart.$proc$uart.v:83$69'.
  Set init value: \txByteCounter = 4'0000
Found init rule in `\uart.$proc$uart.v:82$68'.
  Set init value: \txBitNumber = 3'000
Found init rule in `\uart.$proc$uart.v:81$67'.
  Set init value: \txPinRegister = 1'1
Found init rule in `\uart.$proc$uart.v:80$66'.
  Set init value: \dataOut = 8'00000000
Found init rule in `\uart.$proc$uart.v:79$65'.
  Set init value: \txCounter = 25'0000000000000000000000000
Found init rule in `\uart.$proc$uart.v:78$64'.
  Set init value: \txState = 4'0000
Found init rule in `\uart.$proc$uart.v:21$63'.
  Set init value: \byteReady = 1'0
Found init rule in `\uart.$proc$uart.v:20$62'.
  Set init value: \rxBitNumber = 3'000
Found init rule in `\uart.$proc$uart.v:19$61'.
  Set init value: \dataIn = 8'00000000
Found init rule in `\uart.$proc$uart.v:18$60'.
  Set init value: \rxCounter = 13'0000000000000
Found init rule in `\uart.$proc$uart.v:17$59'.
  Set init value: \rxState = 4'0000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$323'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$312'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$302'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$296'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$285'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$274'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$264'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$258'.

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~34 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$326'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$323'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$322'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$316'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$315'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$312'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$311'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$305'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$304'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$302'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$301'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$299'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$298'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$296'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$295'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$293'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$292'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$291'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$290'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$289'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$288'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$285'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$284'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$278'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$277'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$274'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$273'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$267'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$266'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$264'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$263'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$261'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$260'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$258'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$255'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$253'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$252'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:271$251'.
Creating decoders for process `\uart.$proc$uart.v:0$70'.
Creating decoders for process `\uart.$proc$uart.v:83$69'.
Creating decoders for process `\uart.$proc$uart.v:82$68'.
Creating decoders for process `\uart.$proc$uart.v:81$67'.
Creating decoders for process `\uart.$proc$uart.v:80$66'.
Creating decoders for process `\uart.$proc$uart.v:79$65'.
Creating decoders for process `\uart.$proc$uart.v:78$64'.
Creating decoders for process `\uart.$proc$uart.v:21$63'.
Creating decoders for process `\uart.$proc$uart.v:20$62'.
Creating decoders for process `\uart.$proc$uart.v:19$61'.
Creating decoders for process `\uart.$proc$uart.v:18$60'.
Creating decoders for process `\uart.$proc$uart.v:17$59'.
Creating decoders for process `\uart.$proc$uart.v:111$27'.
     1/6: $0\txByteCounter[3:0]
     2/6: $0\txBitNumber[2:0]
     3/6: $0\txPinRegister[0:0]
     4/6: $0\dataOut[7:0]
     5/6: $0\txCounter[24:0]
     6/6: $0\txState[3:0]
Creating decoders for process `\uart.$proc$uart.v:72$25'.
     1/1: $0\led[5:0]
Creating decoders for process `\uart.$proc$uart.v:29$13'.
     1/5: $0\byteReady[0:0]
     2/5: $0\rxBitNumber[2:0]
     3/5: $0\dataIn[7:0]
     4/5: $0\rxCounter[12:0]
     5/5: $0\rxState[3:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:91$1_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:92$2_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:93$3_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:94$4_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:95$5_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:96$6_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:97$7_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:98$8_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:99$9_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:100$10_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:101$11_EN' from process `\uart.$proc$uart.v:0$70'.
No latch inferred for signal `\uart.$memwr$\testMemory$uart.v:102$12_EN' from process `\uart.$proc$uart.v:0$70'.

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$323'.
  created $adff cell `$procdff$650' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$316'.
  created $dff cell `$procdff$651' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$312'.
  created $adff cell `$procdff$652' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$305'.
  created $dff cell `$procdff$653' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$302'.
  created $adff cell `$procdff$654' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$299'.
  created $dff cell `$procdff$655' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$296'.
  created $adff cell `$procdff$656' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$293'.
  created $dff cell `$procdff$657' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$291'.
  created $dff cell `$procdff$658' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$289'.
  created $dff cell `$procdff$659' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$285'.
  created $adff cell `$procdff$660' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$278'.
  created $dff cell `$procdff$661' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$274'.
  created $adff cell `$procdff$662' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$267'.
  created $dff cell `$procdff$663' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$264'.
  created $adff cell `$procdff$664' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$261'.
  created $dff cell `$procdff$665' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$258'.
  created $adff cell `$procdff$666' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$255'.
  created $dff cell `$procdff$667' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$253'.
  created $dff cell `$procdff$668' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:271$251'.
  created $dff cell `$procdff$669' with positive edge clock.
Creating register for signal `\uart.\txState' using process `\uart.$proc$uart.v:111$27'.
  created $dff cell `$procdff$670' with positive edge clock.
Creating register for signal `\uart.\txCounter' using process `\uart.$proc$uart.v:111$27'.
  created $dff cell `$procdff$671' with positive edge clock.
Creating register for signal `\uart.\dataOut' using process `\uart.$proc$uart.v:111$27'.
  created $dff cell `$procdff$672' with positive edge clock.
Creating register for signal `\uart.\txPinRegister' using process `\uart.$proc$uart.v:111$27'.
  created $dff cell `$procdff$673' with positive edge clock.
Creating register for signal `\uart.\txBitNumber' using process `\uart.$proc$uart.v:111$27'.
  created $dff cell `$procdff$674' with positive edge clock.
Creating register for signal `\uart.\txByteCounter' using process `\uart.$proc$uart.v:111$27'.
  created $dff cell `$procdff$675' with positive edge clock.
Creating register for signal `\uart.\led' using process `\uart.$proc$uart.v:72$25'.
  created $dff cell `$procdff$676' with positive edge clock.
Creating register for signal `\uart.\rxState' using process `\uart.$proc$uart.v:29$13'.
  created $dff cell `$procdff$677' with positive edge clock.
Creating register for signal `\uart.\rxCounter' using process `\uart.$proc$uart.v:29$13'.
  created $dff cell `$procdff$678' with positive edge clock.
Creating register for signal `\uart.\dataIn' using process `\uart.$proc$uart.v:29$13'.
  created $dff cell `$procdff$679' with positive edge clock.
Creating register for signal `\uart.\rxBitNumber' using process `\uart.$proc$uart.v:29$13'.
  created $dff cell `$procdff$680' with positive edge clock.
Creating register for signal `\uart.\byteReady' using process `\uart.$proc$uart.v:29$13'.
  created $dff cell `$procdff$681' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$326'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$323'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1414$323'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$322'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$316'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1353$316'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$315'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$312'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1273$312'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$311'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$305'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1212$305'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$304'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1138$302'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$301'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$299'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1088$299'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$298'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1017$296'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$295'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$293'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:967$293'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$292'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$291'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:922$291'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$290'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$289'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$288'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$285'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:803$285'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$284'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$278'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:742$278'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$277'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$274'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:662$274'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$273'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$267'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:601$267'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$266'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:527$264'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$263'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$261'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:477$261'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$260'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:406$258'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$255'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:356$255'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$253'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:311$253'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$252'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:271$251'.
Removing empty process `uart.$proc$uart.v:0$70'.
Removing empty process `uart.$proc$uart.v:83$69'.
Removing empty process `uart.$proc$uart.v:82$68'.
Removing empty process `uart.$proc$uart.v:81$67'.
Removing empty process `uart.$proc$uart.v:80$66'.
Removing empty process `uart.$proc$uart.v:79$65'.
Removing empty process `uart.$proc$uart.v:78$64'.
Removing empty process `uart.$proc$uart.v:21$63'.
Removing empty process `uart.$proc$uart.v:20$62'.
Removing empty process `uart.$proc$uart.v:19$61'.
Removing empty process `uart.$proc$uart.v:18$60'.
Removing empty process `uart.$proc$uart.v:17$59'.
Found and cleaned up 9 empty switches in `\uart.$proc$uart.v:111$27'.
Removing empty process `uart.$proc$uart.v:111$27'.
Found and cleaned up 1 empty switch in `\uart.$proc$uart.v:72$25'.
Removing empty process `uart.$proc$uart.v:72$25'.
Found and cleaned up 6 empty switches in `\uart.$proc$uart.v:29$13'.
Removing empty process `uart.$proc$uart.v:29$13'.
Cleaned up 34 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~19 debug messages>

2.4. Executing FLATTEN pass (flatten design).

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 2 unused cells and 83 unused wires.
<suppressed ~3 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
Checking module uart...
Found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
    New ctrl vector for $pmux cell $procmux$554: { $procmux$519_CMP $auto$opt_reduce.cc:134:opt_pmux$683 $procmux$555_CMP }
  Optimizing cells in module \uart.
Performed a total of 1 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.10.20. Executing OPT_DFF pass (perform DFF optimizations).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking uart.rxState as FSM state register:
    Register has an initialization value.
Not marking uart.txState as FSM state register:
    Register has an initialization value.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$681 ($dff) from module uart (D = $0\byteReady[0:0], Q = \byteReady).
Adding EN signal on $procdff$680 ($dff) from module uart (D = $0\rxBitNumber[2:0], Q = \rxBitNumber).
Adding EN signal on $procdff$679 ($dff) from module uart (D = { \uart_rx \dataIn [7:1] }, Q = \dataIn).
Adding EN signal on $procdff$678 ($dff) from module uart (D = $0\rxCounter[12:0], Q = \rxCounter).
Adding EN signal on $procdff$677 ($dff) from module uart (D = $0\rxState[3:0], Q = \rxState).
Adding EN signal on $procdff$676 ($dff) from module uart (D = $not$uart.v:74$26_Y, Q = \led).
Adding EN signal on $procdff$675 ($dff) from module uart (D = $0\txByteCounter[3:0], Q = \txByteCounter).
Adding EN signal on $procdff$674 ($dff) from module uart (D = $0\txBitNumber[2:0], Q = \txBitNumber).
Adding EN signal on $procdff$673 ($dff) from module uart (D = $0\txPinRegister[0:0], Q = \txPinRegister).
Adding EN signal on $procdff$672 ($dff) from module uart (D = $memrd$\testMemory$uart.v:127$31_DATA, Q = \dataOut).
Adding EN signal on $procdff$671 ($dff) from module uart (D = $0\txCounter[24:0], Q = \txCounter).
Adding EN signal on $procdff$670 ($dff) from module uart (D = $0\txState[3:0], Q = \txState).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~9 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.12.23. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:100$56 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:101$57 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:102$58 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:91$47 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:92$48 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:93$49 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:94$50 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:95$51 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:96$52 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:97$53 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:98$54 (testMemory).
Removed top 28 address bits (of 32) from memory init port uart.$meminit$\testMemory$uart.v:99$55 (testMemory).
Removed top 6 bits (of 13) from port B of cell uart.$eq$uart.v:40$15 ($eq).
Removed top 31 bits (of 32) from port B of cell uart.$add$uart.v:44$16 ($add).
Removed top 18 bits (of 32) from port Y of cell uart.$add$uart.v:44$16 ($add).
Removed top 18 bits (of 32) from port A of cell uart.$eq$uart.v:48$19 ($eq).
Removed top 24 bits (of 32) from port B of cell uart.$eq$uart.v:48$19 ($eq).
Removed top 31 bits (of 32) from port B of cell uart.$add$uart.v:55$20 ($add).
Removed top 29 bits (of 32) from port Y of cell uart.$add$uart.v:55$20 ($add).
Removed top 31 bits (of 32) from port B of cell uart.$add$uart.v:125$29 ($add).
Removed top 6 bits (of 32) from port Y of cell uart.$add$uart.v:125$29 ($add).
Removed top 6 bits (of 32) from port A of cell uart.$eq$uart.v:125$30 ($eq).
Removed top 24 bits (of 32) from port B of cell uart.$eq$uart.v:125$30 ($eq).
Removed top 31 bits (of 32) from port B of cell uart.$add$uart.v:140$37 ($add).
Removed top 29 bits (of 32) from port Y of cell uart.$add$uart.v:140$37 ($add).
Removed top 31 bits (of 32) from port B of cell uart.$add$uart.v:152$42 ($add).
Removed top 28 bits (of 32) from port Y of cell uart.$add$uart.v:152$42 ($add).
Removed top 5 bits (of 23) from port B of cell uart.$eq$uart.v:160$44 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$procmux$515_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$procmux$529_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell uart.$procmux$533_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell uart.$procmux$555_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell uart.$procmux$581 ($mux).
Removed top 3 bits (of 4) from mux cell uart.$procmux$588 ($mux).
Removed top 1 bits (of 4) from port B of cell uart.$procmux$606_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$procmux$612_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell uart.$procmux$624_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell uart.$procmux$628_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell uart.$procmux$637 ($mux).
Removed top 6 bits (of 32) from wire uart.$add$uart.v:125$29_Y.
Removed top 29 bits (of 32) from wire uart.$add$uart.v:140$37_Y.
Removed top 18 bits (of 32) from wire uart.$add$uart.v:44$16_Y.
Removed top 29 bits (of 32) from wire uart.$add$uart.v:55$20_Y.
Removed top 1 bits (of 4) from wire uart.$procmux$581_Y.
Removed top 3 bits (of 4) from wire uart.$procmux$588_Y.
Removed top 1 bits (of 4) from wire uart.$procmux$637_Y.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module uart:
  creating $macc model for $add$uart.v:125$29 ($add).
  creating $macc model for $add$uart.v:140$37 ($add).
  creating $macc model for $add$uart.v:152$42 ($add).
  creating $macc model for $add$uart.v:44$16 ($add).
  creating $macc model for $add$uart.v:55$20 ($add).
  creating $alu model for $macc $add$uart.v:55$20.
  creating $alu model for $macc $add$uart.v:44$16.
  creating $alu model for $macc $add$uart.v:152$42.
  creating $alu model for $macc $add$uart.v:140$37.
  creating $alu model for $macc $add$uart.v:125$29.
  creating $alu cell for $add$uart.v:125$29: $auto$alumacc.cc:485:replace_alu$788
  creating $alu cell for $add$uart.v:140$37: $auto$alumacc.cc:485:replace_alu$791
  creating $alu cell for $add$uart.v:152$42: $auto$alumacc.cc:485:replace_alu$794
  creating $alu cell for $add$uart.v:44$16: $auto$alumacc.cc:485:replace_alu$797
  creating $alu cell for $add$uart.v:55$20: $auto$alumacc.cc:485:replace_alu$800
  created 5 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.21.9. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
uart.testMemory: removing const-0 lane 7
Performed a total of 1 transformations.

2.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.22.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.22.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\testMemory'[0] in module `\uart': merging output FF to cell.

2.22.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.22.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.22.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.24. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory uart.testMemory
<suppressed ~55 debug messages>

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.25.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.25.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~38 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$733 ($dffe) from module uart (D = $procmux$526_Y, Q = \txBitNumber, rval = 3'000).
Adding SRST signal on $auto$ff.cc:266:slice$722 ($dffe) from module uart (D = $procmux$512_Y, Q = \txByteCounter, rval = 4'0000).
Adding SRST signal on $auto$ff.cc:266:slice$693 ($dffe) from module uart (D = $add$uart.v:55$20_Y, Q = \rxBitNumber, rval = 3'000).
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 1-bit at position 1 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 1-bit at position 2 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 1-bit at position 3 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 1-bit at position 4 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 1-bit at position 5 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 1-bit at position 6 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$751 ($dffe) from module uart.

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 3 unused cells and 35 unused wires.
<suppressed ~4 debug messages>

2.27.5. Rerunning OPT passes. (Removed registers in this run.)

2.27.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~1 debug messages>

2.27.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.27.8. Executing OPT_DFF pass (perform DFF optimizations).

2.27.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.10. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \testMemory in module \uart:
  created 12 $dff cells and 0 static cells of width 7.
Extracted data FF from read port 0 of uart.testMemory: $\testMemory$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~7 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][3][3]$864:
      Old ports: A=7'0100000, B=7'1001100, Y=$memory\testMemory$rdmux[0][2][1]$b$848
      New ports: A=2'10, B=2'01, Y={ $memory\testMemory$rdmux[0][2][1]$b$848 [5] $memory\testMemory$rdmux[0][2][1]$b$848 [2] }
      New connections: { $memory\testMemory$rdmux[0][2][1]$b$848 [6] $memory\testMemory$rdmux[0][2][1]$b$848 [4:3] $memory\testMemory$rdmux[0][2][1]$b$848 [1:0] } = { $memory\testMemory$rdmux[0][2][1]$b$848 [2] 1'0 $memory\testMemory$rdmux[0][2][1]$b$848 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][3][2]$861:
      Old ports: A=7'1100001, B=7'1111001, Y=$memory\testMemory$rdmux[0][2][1]$a$847
      New ports: A=1'0, B=1'1, Y=$memory\testMemory$rdmux[0][2][1]$a$847 [3]
      New connections: { $memory\testMemory$rdmux[0][2][1]$a$847 [6:4] $memory\testMemory$rdmux[0][2][1]$a$847 [2:0] } = { 2'11 $memory\testMemory$rdmux[0][2][1]$a$847 [3] 3'001 }
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][3][1]$858:
      Old ports: A=7'1110011, B=7'1101000, Y=$memory\testMemory$rdmux[0][2][0]$b$845
      New ports: A=2'01, B=2'10, Y={ $memory\testMemory$rdmux[0][2][0]$b$845 [3] $memory\testMemory$rdmux[0][2][0]$b$845 [0] }
      New connections: { $memory\testMemory$rdmux[0][2][0]$b$845 [6:4] $memory\testMemory$rdmux[0][2][0]$b$845 [2:1] } = { 2'11 $memory\testMemory$rdmux[0][2][0]$b$845 [0] 1'0 $memory\testMemory$rdmux[0][2][0]$b$845 [0] }
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][3][0]$855:
      Old ports: A=7'1001100, B=7'1110101, Y=$memory\testMemory$rdmux[0][2][0]$a$844
      New ports: A=2'10, B=2'01, Y={ $memory\testMemory$rdmux[0][2][0]$a$844 [3] $memory\testMemory$rdmux[0][2][0]$a$844 [0] }
      New connections: { $memory\testMemory$rdmux[0][2][0]$a$844 [6:4] $memory\testMemory$rdmux[0][2][0]$a$844 [2:1] } = { 1'1 $memory\testMemory$rdmux[0][2][0]$a$844 [0] $memory\testMemory$rdmux[0][2][0]$a$844 [0] 2'10 }
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][3][4]$867:
      Old ports: A=7'1100001, B=7'1100010, Y=$memory\testMemory$rdmux[0][2][2]$a$850
      New ports: A=2'01, B=2'10, Y=$memory\testMemory$rdmux[0][2][2]$a$850 [1:0]
      New connections: $memory\testMemory$rdmux[0][2][2]$a$850 [6:2] = 5'11000
    New ctrl vector for $pmux cell $procmux$535: { $procmux$533_CMP $procmux$529_CMP }
    Consolidated identical input bits for $pmux cell $procmux$577:
      Old ports: A=4'0001, B={ 7'0010001 $auto$wreduce.cc:461:run$785 [0] 1'0 $auto$wreduce.cc:461:run$784 [2:0] 4'0000 }, Y=$0\txState[3:0]
      New ports: A=3'001, B={ 5'01001 $auto$wreduce.cc:461:run$785 [0] $auto$wreduce.cc:461:run$784 [2:0] 3'000 }, Y=$0\txState[3:0] [2:0]
      New connections: $0\txState[3:0] [3] = 1'0
    Consolidated identical input bits for $mux cell $procmux$581:
      Old ports: A=3'001, B=3'100, Y=$auto$wreduce.cc:461:run$784 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:461:run$784 [2] $auto$wreduce.cc:461:run$784 [0] }
      New connections: $auto$wreduce.cc:461:run$784 [1] = 1'0
    New ctrl vector for $pmux cell $procmux$621: { $procmux$628_CMP $procmux$624_CMP $0\byteReady[0:0] }
    Consolidated identical input bits for $pmux cell $procmux$634:
      Old ports: A=4'0001, B={ 9'001000110 $auto$wreduce.cc:461:run$786 [2:0] 4'0000 }, Y=$0\rxState[3:0]
      New ports: A=3'001, B={ 6'010011 $auto$wreduce.cc:461:run$786 [2:0] 3'000 }, Y=$0\rxState[3:0] [2:0]
      New connections: $0\rxState[3:0] [3] = 1'0
    Consolidated identical input bits for $mux cell $procmux$637:
      Old ports: A=3'010, B=3'101, Y=$auto$wreduce.cc:461:run$786 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:461:run$786 [1:0]
      New connections: $auto$wreduce.cc:461:run$786 [2] = $auto$wreduce.cc:461:run$786 [0]
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][3][5]$870:
      Old ports: A=7'1110011, B=7'0100000, Y=$memory\testMemory$rdmux[0][2][2]$b$851
      New ports: A=1'1, B=1'0, Y=$memory\testMemory$rdmux[0][2][2]$b$851 [0]
      New connections: $memory\testMemory$rdmux[0][2][2]$b$851 [6:1] = { $memory\testMemory$rdmux[0][2][2]$b$851 [0] 1'1 $memory\testMemory$rdmux[0][2][2]$b$851 [0] 2'00 $memory\testMemory$rdmux[0][2][2]$b$851 [0] }
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][2][2]$849:
      Old ports: A=$memory\testMemory$rdmux[0][2][2]$a$850, B=$memory\testMemory$rdmux[0][2][2]$b$851, Y=$memory\testMemory$rdmux[0][1][1]$a$841
      New ports: A={ 2'10 $memory\testMemory$rdmux[0][2][2]$a$850 [1:0] }, B={ $memory\testMemory$rdmux[0][2][2]$b$851 [0] $memory\testMemory$rdmux[0][2][2]$b$851 [0] $memory\testMemory$rdmux[0][2][2]$b$851 [0] $memory\testMemory$rdmux[0][2][2]$b$851 [0] }, Y={ $memory\testMemory$rdmux[0][1][1]$a$841 [6] $memory\testMemory$rdmux[0][1][1]$a$841 [4] $memory\testMemory$rdmux[0][1][1]$a$841 [1:0] }
      New connections: { $memory\testMemory$rdmux[0][1][1]$a$841 [5] $memory\testMemory$rdmux[0][1][1]$a$841 [3:2] } = 3'100
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][2][1]$846:
      Old ports: A=$memory\testMemory$rdmux[0][2][1]$a$847, B=$memory\testMemory$rdmux[0][2][1]$b$848, Y=$memory\testMemory$rdmux[0][1][0]$b$839
      New ports: A={ 2'11 $memory\testMemory$rdmux[0][2][1]$a$847 [3] $memory\testMemory$rdmux[0][2][1]$a$847 [3] 2'01 }, B={ $memory\testMemory$rdmux[0][2][1]$b$848 [2] $memory\testMemory$rdmux[0][2][1]$b$848 [5] 1'0 $memory\testMemory$rdmux[0][2][1]$b$848 [2] $memory\testMemory$rdmux[0][2][1]$b$848 [2] 1'0 }, Y={ $memory\testMemory$rdmux[0][1][0]$b$839 [6:2] $memory\testMemory$rdmux[0][1][0]$b$839 [0] }
      New connections: $memory\testMemory$rdmux[0][1][0]$b$839 [1] = 1'0
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][2][0]$843:
      Old ports: A=$memory\testMemory$rdmux[0][2][0]$a$844, B=$memory\testMemory$rdmux[0][2][0]$b$845, Y=$memory\testMemory$rdmux[0][1][0]$a$838
      New ports: A={ $memory\testMemory$rdmux[0][2][0]$a$844 [0] $memory\testMemory$rdmux[0][2][0]$a$844 [3] 2'10 $memory\testMemory$rdmux[0][2][0]$a$844 [0] }, B={ 1'1 $memory\testMemory$rdmux[0][2][0]$b$845 [3] 1'0 $memory\testMemory$rdmux[0][2][0]$b$845 [0] $memory\testMemory$rdmux[0][2][0]$b$845 [0] }, Y={ $memory\testMemory$rdmux[0][1][0]$a$838 [5] $memory\testMemory$rdmux[0][1][0]$a$838 [3:0] }
      New connections: { $memory\testMemory$rdmux[0][1][0]$a$838 [6] $memory\testMemory$rdmux[0][1][0]$a$838 [4] } = { 1'1 $memory\testMemory$rdmux[0][1][0]$a$838 [0] }
  Optimizing cells in module \uart.
    Consolidated identical input bits for $mux cell $memory\testMemory$rdmux[0][1][1]$840:
      Old ports: A=$memory\testMemory$rdmux[0][1][1]$a$841, B=7'x, Y=$memory\testMemory$rdmux[0][0][0]$b$836
      New ports: A={ $memory\testMemory$rdmux[0][1][1]$a$841 [6] 1'1 $memory\testMemory$rdmux[0][1][1]$a$841 [4] 1'0 $memory\testMemory$rdmux[0][1][1]$a$841 [1:0] }, B=6'x, Y={ $memory\testMemory$rdmux[0][0][0]$b$836 [6:4] $memory\testMemory$rdmux[0][0][0]$b$836 [2:0] }
      New connections: $memory\testMemory$rdmux[0][0][0]$b$836 [3] = $memory\testMemory$rdmux[0][0][0]$b$836 [2]
  Optimizing cells in module \uart.
Performed a total of 16 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.29.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$708 ($dffe) from module uart.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$763 ($dffe) from module uart.

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~2 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.29.20. Executing OPT_DFF pass (perform DFF optimizations).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.29.23. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$constmap:dc39c6261db290de4d2b92f7f37f7f67d6b29079$paramod$92adee9538f2381d8e5006822c900eb986d754e8\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$106402fc14ba87a4d8643cf9e9a3de5e7eff24e1\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$4a58d7fd3318dd8888b73fafae1fb67f4a3751e3\_80_ice40_alu for cells of type $alu.
Using template $paramod$51d09f51f8e4e709467c94f1487f4e47b5087bf0\_90_pmux for cells of type $pmux.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using template $paramod$22d60a7641dca782b2290912c8e26f3c8b9c52b2\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~520 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~377 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~195 debug messages>
Removed a total of 65 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 33 unused cells and 400 unused wires.
<suppressed ~34 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$788.slice[0].carry: CO=\txCounter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$788.slice[25].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$791.slice[0].carry: CO=\txBitNumber [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$794.slice[0].carry: CO=\txByteCounter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$797.slice[0].carry: CO=\rxCounter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$797.slice[13].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) uart.$auto$alumacc.cc:485:replace_alu$800.slice[0].carry: CO=\rxBitNumber [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~7 debug messages>

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1762 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [12], Q = \rxCounter [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1761 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [11], Q = \rxCounter [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1760 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [10], Q = \rxCounter [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1759 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [9], Q = \rxCounter [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1758 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [8], Q = \rxCounter [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1757 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [7], Q = \rxCounter [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1756 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [6], Q = \rxCounter [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1755 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [5], Q = \rxCounter [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1754 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [4], Q = \rxCounter [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1753 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [3], Q = \rxCounter [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1752 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [2], Q = \rxCounter [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1751 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [1], Q = \rxCounter [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1750 ($_DFFE_PP_) from module uart (D = $procmux$621.Y_B [0], Q = \rxCounter [0], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1749 ($_DFFE_PP_) from module uart (D = $procmux$577.B_AND_S [5], Q = \txState [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1748 ($_DFFE_PP_) from module uart (D = $procmux$577.Y_B [1], Q = \txState [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1747 ($_DFFE_PP_) from module uart (D = $procmux$577.Y_B [0], Q = \txState [0], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1733 ($_DFFE_PP_) from module uart (D = $procmux$535.B_AND_S [0], Q = \txPinRegister, rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1732 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [24], Q = \txCounter [24], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1731 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [23], Q = \txCounter [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1730 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [22], Q = \txCounter [22], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1729 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [21], Q = \txCounter [21], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1728 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [20], Q = \txCounter [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1727 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [19], Q = \txCounter [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1726 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [18], Q = \txCounter [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1725 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [17], Q = \txCounter [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1724 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [16], Q = \txCounter [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1723 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [15], Q = \txCounter [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1722 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [14], Q = \txCounter [14], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1721 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [13], Q = \txCounter [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1720 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [12], Q = \txCounter [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1719 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [11], Q = \txCounter [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1718 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [10], Q = \txCounter [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1717 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [9], Q = \txCounter [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1716 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [8], Q = \txCounter [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1715 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [7], Q = \txCounter [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1714 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [6], Q = \txCounter [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1713 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [5], Q = \txCounter [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1712 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [4], Q = \txCounter [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1711 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [3], Q = \txCounter [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1710 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [2], Q = \txCounter [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1709 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [1], Q = \txCounter [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1708 ($_DFFE_PP_) from module uart (D = $procmux$554.Y_B [0], Q = \txCounter [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1548 ($_DFFE_PP_) from module uart (D = $procmux$634.B_AND_S [5], Q = \rxState [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1547 ($_DFFE_PP_) from module uart (D = $procmux$634.Y_B [1], Q = \rxState [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1546 ($_DFFE_PP_) from module uart (D = $procmux$634.Y_B [0], Q = \rxState [0], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1526 ($_DFFE_PP_) from module uart (D = $memory\testMemory$rdmux[0][0][0]$a$835 [5], Q = \dataOut [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$1524 ($_DFFE_PP_) from module uart (D = $memory\testMemory$rdmux[0][0][0]$a$835 [3], Q = \dataOut [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1523 ($_DFFE_PP_) from module uart (D = $memory\testMemory$rdmux[0][0][0]$a$835 [2], Q = \dataOut [2], rval = 1'0).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 48 unused cells and 8 unused wires.
<suppressed ~49 debug messages>

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
No more expansions possible.
<suppressed ~99 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping uart.$auto$alumacc.cc:485:replace_alu$788.slice[25].carry ($lut).
Mapping uart.$auto$alumacc.cc:485:replace_alu$791.slice[0].carry ($lut).
Mapping uart.$auto$alumacc.cc:485:replace_alu$794.slice[0].carry ($lut).
Mapping uart.$auto$alumacc.cc:485:replace_alu$797.slice[0].carry ($lut).
Mapping uart.$auto$alumacc.cc:485:replace_alu$797.slice[13].carry ($lut).
Mapping uart.$auto$alumacc.cc:485:replace_alu$800.slice[0].carry ($lut).
Mapping uart.$auto$alumacc.cc:485:replace_alu$788.slice[0].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~153 debug messages>

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 519 unused wires.
<suppressed ~1 debug messages>

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

2.38.12. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.40. Executing ABC pass (technology mapping using ABC).

2.40.1. Extracting gate netlist of module `\uart' to `<abc-temp-dir>/input.blif'..
Extracted 467 gates and 577 wires to a netlist network with 108 inputs and 82 outputs.

2.40.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      92.
ABC: Participating nodes from both networks       =     203.
ABC: Participating nodes from the first network   =      94. (  71.76 % of nodes)
ABC: Participating nodes from the second network  =     109. (  83.21 % of nodes)
ABC: Node pairs (any polarity)                    =      94. (  71.76 % of names can be moved)
ABC: Node pairs (same polarity)                   =      92. (  70.23 % of names can be moved)
ABC: Total runtime =     0.06 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      130
ABC RESULTS:        internal signals:      387
ABC RESULTS:           input signals:      108
ABC RESULTS:          output signals:       82
Removing temp directory.

2.41. Executing ICE40_WRAPCARRY pass (wrap carries).

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 3 unused cells and 350 unused wires.

2.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      172
  1-LUT               12
  2-LUT               46
  3-LUT               69
  4-LUT               45
  with \SB_CARRY    (#0)   40
  with \SB_CARRY    (#1)   38

Eliminating LUTs.
Number of LUTs:      172
  1-LUT               12
  2-LUT               46
  3-LUT               69
  4-LUT               45
  with \SB_CARRY    (#0)   40
  with \SB_CARRY    (#1)   38

Combining LUTs.
Number of LUTs:      172
  1-LUT               12
  2-LUT               46
  3-LUT               69
  4-LUT               45
  with \SB_CARRY    (#0)   40
  with \SB_CARRY    (#1)   38

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~661 debug messages>

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
Using template $paramod$06611ecf8552b958ac4b3027047968d13c4b5316\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$fcb4e8e2c7cb318fed83c21aaabb2e2c651fef8e\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$bdb7f9ed72fd4f5c7ad81c376f2d8a5c72a0098d\$lut for cells of type $lut.
Using template $paramod$b9b9f9c515e85a2ddbfbd717bd1ba263cf345893\$lut for cells of type $lut.
Using template $paramod$087ace6930bade56e1237b8b637019df03253fcc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$7299f2246d1a80c33c807bc8bb00c5b5d234d530\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$ad397839a2a15b2410c4d9e2c3b4f0d2d26d4943\$lut for cells of type $lut.
Using template $paramod$56c6fc98268f6966dd23dcb4af9b8f5298fa7ead\$lut for cells of type $lut.
Using template $paramod$51307cdec77060d17363ea3d60427c9afef1ddc2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000011 for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101011 for cells of type $lut.
Using template $paramod$18b36052d36cf72729de86cdac9ca94acc9d989c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$3c90351ab53dc81386feef7a3560ce18ed07dec2\$lut for cells of type $lut.
Using template $paramod$216a650699223a9dfd837db450ae8c62b73806c4\$lut for cells of type $lut.
Using template $paramod$6e46ec5a196ba1a24b8e69ab094cadc07c13ac1f\$lut for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000101 for cells of type $lut.
Using template $paramod$96288e699aa5aef3f78113f3d61a81ccebbd5b8c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01111110 for cells of type $lut.
No more expansions possible.
<suppressed ~812 debug messages>
Removed 0 unused cells and 369 unused wires.

2.45. Executing AUTONAME pass.
Renamed 2727 objects in module uart (25 iterations).
<suppressed ~362 debug messages>

2.46. Executing HIERARCHY pass (managing design hierarchy).

2.46.1. Analyzing design hierarchy..
Top module:  \uart

2.46.2. Analyzing design hierarchy..
Top module:  \uart
Removed 0 unused modules.

2.47. Printing statistics.

=== uart ===

   Number of wires:                 89
   Number of wire bits:            389
   Number of public wires:          89
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                289
     SB_CARRY                       40
     SB_DFFE                        19
     SB_DFFESR                      54
     SB_DFFESS                       4
     SB_LUT4                       172

2.48. Executing CHECK pass (checking for obvious problems).
Checking module uart...
Found and reported 0 problems.

2.49. Executing JSON backend.

End of script. Logfile hash: e1309a8c39, CPU: user 3.15s system 0.10s, MEM: 23.46 MB peak
Yosys 0.33+79 (git sha1 b52f6cb19, gcc 10.2.1-6 -fPIC -Os)
Time spent: 32% 13x read_verilog (1 sec), 14% 27x opt_expr (0 sec), ...
